        2.2.5深拷贝和浅拷贝
            浅拷贝：简单的赋值拷贝操作
            深拷贝：堆区重新申请空间，进行拷贝操作
            浅拷贝带来的问题是堆区重复释放
            利用深拷贝再堆区重新再开辟新的内存解决重复释放
            导致的非法操作问题
            class Person
            {
            public:
                Person()
                {
                    cout << "默认构造函数调用" << endl;
                }
                Person(int age,int m_height)
                {
                    m_Age = age;
                    m_Height = new int(m_height);
                    cout << "有参构造函数调用" << endl;
                }
                //编译器提供的拷贝函数只会做浅拷贝
                Person(const Person &p)
                {
                    cout << "拷贝构造函数调用" << endl;
                    m_Age = p.m_Age;
                    m_Height = new int(*p.m_Height);
                }
                ~Person()
                {
                    //释放堆区内容
                    if (m_Height != NULL)
                    {
                        delete m_Height;
                        m_Height = NULL;
                    }
                    cout << "析构函数调用" << endl;
                }
                int m_Age;
                int *m_Height;
            };
        2.2.6初始化列表
            作用：提供初始化列表语法，用来初始化属性
            语法：构造函数():属性1(),属性2(),属性3()...{}
            class Person
            {
            public:
            //隐式转换法
                Person(int a,int b,int c):m_a(a),m_b(b),m_c(c){}
            int m_a;
            int m_b;
            int m_c;
            }
        2.2.7类对象作为类成员
            C++类中的成员可以是另一个类的对象
            class A{};
            class B
            {
                A a;
            };
        2.2.8静态成员
            静态成员就是在成员变量和成员函数前加上关键字Static
            静态成员分为：
                ·静态成员变量
                    1.所有对象共享同一份数据
                    2.在编译阶段分配内存   //在编译内存时分配（程序未运行）
                    3.类内声明，类外初始化
                class Person
                {
                public:
                    static int a;   //类内声明
                };
                注意事项：
                    静态成员变量不属于某个对象，所有对象共享同一份数据
                    静态成员变量有访问权限
                访问静态成员变量有两种方式：
                    1.通过对象 2.通过类名
                        1.Person p;
                            p.a; 
                        2.Person::a;
                int Person::a=100;  //类外初始化
                ·静态成员函数
                    1.所有对象共享同一个函数
                    2.静态成员函数‘只能访问’‘静态成员变量’
                class Person
                {
                public:
                    static void func(int a);   //类内声明
                }; 
                注意事项:
                    1.静态成员函数不属于某个对象，所有对象共享同一份函数
                    2.静态成员函数有访问权限 
                访问静态成员变量有两种方式：
                1.通过对象 2.通过类名
                    1.Person p;
                        p.func(); 
                    2.Person::func();
    2.3C++对象模型和this指针
        2.3.1成员变量和成员函数分开存储
            在C++中，类内的成员变量和成员函数分别存储
            只有非静态成员变量才属于类的对象上
            C++编译器会给每个空对象分配1个内存，为了区分空对象占内存的位置
            每个空对象都有独一无二的内存地址
            只有非静态成员变量属于类的对象，除此之外静态成员、非静态函数和静态函数都不属于
        2.3.2this指针概念
            this指针指向被调用的成员函数所属的对象
            this指针是隐含在每一个非静态成员函数内的一种指针
            this指针不需要定义，直接使用即可

            class Person
            {
            public:
                //解决名称冲突
                Person(int age)
                {
                    //this 指向被调用成员函数所属的对象
                    this->age = age;
                }
                //要返回本体必须加上引用符号&
                Person& PersonAddAge(Person& p)
                {
                    this->age += p.age;
                    return *this;
                }
                int age;
            };
            void test1()
            {
                Person p1(18);
                cout << "p1的年龄为：" << p1.age << endl;
            }
            void test2()
            {
                Person p1(10);
                Person p2(10);
                //链式编程思想
                p2.PersonAddAge(p1).PersonAddAge(p1);
                cout << "p2的年龄为：" << p2.age << endl;
            }
        2.3.3空指针访问成员函数
            C++中空指针也是可以调用成员函数，但是也要注意有没有用到this指针
            如果用到this指针，需要判断程序的健壮性
            class Person
            {
                void showPersonAge()
                {
                    //为了确保程序健壮性，需要改进成以下代码
                    if(this==NULL)
                        return ;
                    cout<<"age= "<<m_Age<<endl;   m_Age (this->m_Age)
                }
                int m_Age;
            }
            void test1()
            {
                Person *p1=NULL;
                p1->showPersonAge() //程序将出错,加入if条件语句后正常
            }
        2.3.4const修饰成员函数
            常函数：
                ·成员函数后加const后我们称为这个函数为常函数
                ·常函数内不可以修改成员属性
                ·成员属性声明时加关键字mutable后，在常函数中依然可以修改
            常对象：
                ·声明对象前加const称该对象为常对象
                ·常对象只能调用常函数
                class Person
                {
                public:
                    /*
                        this指针的本质是指针常量，所以指针的指向是无法修改的
                        Person * const this
                    */
                    //变成常函数后实质为->cosnt Person* const this 
                    void showPerson() const
                    {
                        //m_A = 100;   //this->m_A=100 ; 常函数中是无法操作的
                        m_B = 100;
                    }
                    void showPerson1()
                    {
                        m_A = 100;
                    }
                    int m_A;
                    mutable int m_B;
                };
                void test1()
                {
                    const Person p1;
                    //p1.m_A = 100;
                    p1.m_B = 100;
                    //p1.showPerson1();  //常对象只能调用常函数
                }
    2.4友元
        在程序里，有些私有属性，也想让类外特殊的一些函数或者类来特殊访问，就需要用到友元
        友元的目的就是让一个函数或者类，访问另一个类中私有成员
        关键字：‘friend’

        友元的三种三种实现
            ·全局函数做友元
            ·类做友元
            ·成员函数做友元
            class Building; //提前声明有Building 这么一个类
            class GoodFriend
            {
            public:
                GoodFriend();
                void visit();
            private:
                Building* building;
            };
            class GoodFriend_1
            {
            public:
                GoodFriend_1();
                void visit1();
                void visit2();
            private:
                Building* building1;
            };
            
            class Building
            {
                //全局函数做友元
                friend void friend_visit(Building* building);
                //类做友元
                friend class GoodFriend;
                //类成员函数做友元
                friend void GoodFriend_1::visit1();
            public:
                Building();
            public:
                string m_sittingRoom;
            private:
                string m_BedRoom;
            };
            void friend_visit(Building* building)
            {
                cout << "朋友正在访问：" << building->m_sittingRoom << endl;
                cout << "朋友正在访问：" << building->m_BedRoom<< endl;
            }
            Building::Building()
            {
                this->m_sittingRoom = "客厅";
                this->m_BedRoom = "卧室";
            }
            GoodFriend::GoodFriend()
            {
                building = new Building;
            }
            GoodFriend_1::GoodFriend_1()
            {
                building1 = new Building;
            }
            void GoodFriend::visit()
            {
                cout << "好朋友正在访问：" << building->m_BedRoom << endl;
                cout << "好朋友正在访问：" << building->m_sittingRoom << endl;
            }
            void  GoodFriend_1::visit1()
            {
                cout << "朋友正在访问：" << building1->m_sittingRoom << endl;
                cout << "朋友正在访问：" << building1->m_BedRoom << endl;
            }
            void GoodFriend_1::visit2()
            {
                //GooFriend_1的类函数visit2()无权不是Building的友元，无权访问卧室
                cout << "朋友正在访问：" << building1->m_sittingRoom << endl;
                //cout << "朋友正在访问：" << building1->m_BedRoom << endl;
            }
            void test1()
            {
                GoodFriend frank;
                frank.visit();
                Building p1;
                friend_visit(&p1);
                GoodFriend_1 Tom;
                Tom.visit1();
            }
    2.5运算符重载
        概念：对已有的运算符重新进行定义，赋予其另一种功能，以适应不同的数据类型
        2.5.1加号运算符重载
            class Operator
            {
            public:
                //1.成员函数重载运算符
                /*
                        Operator operator+(Operator p)
                {
                    Operator temp;
                    temp.m_a = this->m_a + p.m_a;
                    temp.m_b = this->m_b + p.m_b;
                    return temp;
                }
                */
            
            public:
                int m_a;
                int m_b;
            };
            //2.全局函数重载运算符
            Operator operator+(Operator& p,Operator& p1)
            {
                Operator temp;
                temp.m_a = p.m_a + p1.m_a;
                temp.m_b = p.m_b + p1.m_b;
                return temp;
            }
            void test1()
            {
                Operator p1, p2;
                p1.m_a = 10;
                p2.m_a = 10;
                p1.m_b = 20;
                p2.m_b = 20;
                //1.成员函数重载运算符的本质：Operator p3 = p1.operator+(p2);
                //2.全局函数重载运算符的本质：Operator p3 = operator+(p1,p2);
                //3.运算符也可以发生函数重载
                Operator p3 = p1 + p2;
                cout << "p3.m_a=" << p3.m_a << endl;
                cout << "p3.m_b=" << p3.m_b << endl;
            }
            总结1：对于内置的数据类型的表达式的运算符无法更改
            总结2：不要滥用运算符重载->加变乘
        2.5.2左移运算符重载
            class Person
            {
                friend ostream& operator<< (ostream & cout, Person p1);
            public:
                
            private:
                int m_a=10;
                int m_b=10;
            };
            //1.全局函数重载左移运算符
            ostream& operator<<(ostream&cout,Person p1)
            {
                //链式编程
                cout << p1.m_a ;
                return cout;
            }
            注意事项：
                ostream对象只能有一个
        2.5.3递增&递减运算符重载
            class MyIniteger
            {
                friend ostream& operator<<(ostream& cout, MyIniteger p);
            public:
                //1.重载前置++运算符，返回引用是为了一直对一个数据操作
                MyIniteger& operator++()
                {
                    ++m_a;
                    return *this;
                }
                //1.1重载前置运算符--
                MyIniteger& operator--()
                {
                    --m_a;
                    return *this;
                }
                //2.重载后置++运算符，int 代表占位参数，可以区分前置和后置,返回值
                MyIniteger operator++(int)
                {
                    MyIniteger temp = *this;
                    m_a++;
                    return temp;    //局部变量，施加引用会导致非法访问
                }
                //2.2重载后置运算符--
                MyIniteger operator--(int)
                {
                    MyIniteger temp = *this;
                    m_a--;
                    return temp;
                }
                private:
                    int m_a=10;
                };
                ostream& operator<<(ostream& cout, MyIniteger p)
                {
                    cout << p.m_a;
                    return cout;
                }
                void test1()
                {
                    MyIniteger p1;
                    //cout << "++m_a : " << ++p1 << endl;
                    //cout << "m_a++ : " << p1++ << endl;
                    //cout << "--m_a : " << --p1 << endl;
                    cout << "m_a-- : " << p1-- << endl;
                    cout << p1 << endl;
                }
        2.5.4赋值运算符重载
            C++编译器至少给一个类添加4个函数
            1.默认构造
            2.默认构造（有参）
            3.拷贝函数
            4.赋值运算符operator=，对属性进行值拷贝
            如果类中有属性指向堆区，那么会涉及深浅拷贝的问题
            class Person
            {
            public:
                Person(int age)
                {
                    m_Age = new int(age);
                }
                Person& operator=(Person& p)
                {
                    //先判断是否有属性在堆区，如果有则先释放
                    if (m_Age != NULL)
                    {
                        delete m_Age;
                        m_Age = NULL;	
                    }
                    m_Age = new int(*p.m_Age);
                    return *this;
                }
                ~Person()
                {
                    if (m_Age != NULL)
                    {
                        delete m_Age;
                        m_Age = NULL;
                    }
                }
                int* m_Age;
            };
            void test1()
            {
                Person p1(18);
                Person p2(20);
                //Person p3 = p2 = p1;//p3的年龄内存和p2的一样
                Person p3(20);
                p3 = p1 = p2;
                cout << "p3 的年龄：" << *p3.m_Age << endl;
            }
        2.5.5关系运算符重载
            让两个自定义类型对象进行对比操作
            bool operator==(Person& p)
            {
                if(...)
                    return true/false;
                return false/true;
            }
        2.5.6函数调用运算符重载
            重载后使用的方式非常像函数调用，所以被称为仿函数
            返回类型 operator()(数据类型 形参，...)
            class ....
            {
            public:
                void operator()(int a)
                {
                    cout<<a<<endl;
                }
            };
            void test()
            {
                ... Myprint;
                Myprint(int a);
                ...()(int a);   //匿名函数对象，用完及释放
            }
    2.6继承
        2.6.1继承的基本语法
            拥有父类共性，也拥有自身的特性
            语法：class 子类 :继承方式 父类
            子类也称为派生类，父类也称为基类
            class BassPage
            {
            public:
                ....
            };
            //
            class Java:public BassPage
            {
            public:
            }
        2.6.2继承方式
            ·公共继承
            ·保护继承
            ·私有继承
        2.6.3继承中的对象模型
            父类中所有非静态成员属性都会被子类继承
            父类中私有成员属性是被编译器隐藏，因此访问不到
            打开vs的开发人员命令提示工具
            F：//跳转盘符
            cd 具体路径 //切换路径
            cl /d1 reportSingleClassLayout类名 文件名(Tab补全) //报告单个类模型
        2.6.4继承中构造和析构顺序
            先构造父类再构造子类，先析构子类再析构父类
        2.6.5继承中同名成员处理方式
            ·访问子类同名成员 直接访问即可
            ·访问父类同名成员 需要添加作用域
            class Bass
            {
            public:
                Bass()
                {
                    m_a=10;
                }
                void func()
                {
                    cout<<"父类调用"<<endl;
                }
                int m_a;
            };
            class Son : public Bass
            {
            public:
                Son()
                {
                    m_a=10;
                }
                void func()
                {
                    cout<<"子类调用"<<endl;
                }
                int m_a;
            };
            void test1()
            {
                Person p1;
                cout <<p1.m_a<<endl;
                cout <<p1.Bass::m_a<<endl;
                p1.func();
                p1.Bass::func();
            }
        2.6.6继承同名静态成员处理方式
            ·访问子类同名静态成员 直接访问即可
            ·访问父类同名静态成员 需要添加作用域
            同名静态成员处理方式和非静态处理方式一样，只不过有两种访问的方式
            通过类名和对象
        2.6.7多继承语法
            C++允许一个类继承多个类
            语法：class 子类 : 继承方式 父类1,继承方式 父类2...
            当父类中出现同名成员，子类使用时需要加作用域区分
        2.6.8菱形继承
            两个派生类继承同一个基类，又有某个类同时继承这两个派生类
            这种继承被称为菱形继承或钻石继承
            菱形继承的问题：
                       动物
                    🐏     🐫
                       羊驼
            1.二义性->同名问题 2.重复数据的继承->羊驼会继承两份动物的数据，资源浪费
            解决方法：
            1.利用作用域 2.利用虚继承，继承之前加上关键字virtual,sheep : virtual public animal{};
    2.7多态
        2.7.1多态的基本概念
            多态分为两类  （多种形态）
                ·静态多态：函数重载和运算符重载
                ·动态多态：派生类和虚函数实现运行时多态
            静态多态和动态多态区别：
                ·静态多态的函数地址‘早绑定’
                ·动态多态的函数地址‘晚绑定’
            动态多态满足条件
                1.有继承关系
                2.子类重写父类的‘虚函数’
            动态多态使用
                ‘父类的指针或者引用 执行子类对象’
            class Animal
            {
            public:
                //虚函数
                virtual void speak()
                {
                    cout << "动物在说话" << endl;
                }
            };
            class Cat:public Animal
            {
            public:
                //重写 函数返回值类型 函数名 参数列表需要完全相同
                void speak()
                {
                    cout << "小猫在说话" << endl;
                }
            };
            class Dog :public Animal
            {
            public:
                void speak()
                {
                    cout << "小狗在说话" << endl;
                }
            };
            //地址早绑定，在编译阶段确定函数地址
            //如果想执行让猫说话，那么这个函数地址就不能提前绑定，需要用到动态多态,地址晚绑定
            //即在动物类出加上virtual
            //动态多态的使用：父类的指针或者引用 执行子类对象
            void doSpeak(Animal& animal)//Animal &animal=cat
            {
                animal.speak();
            }
            void test1()
            {
                Cat cat;
                doSpeak(cat);	

                Dog dog;
                doSpeak(dog);
            }
            2.7.1.1多态的深入剖析
                看图例
        2.7.2多态案例一.计算器类
            多态的优点：
                ·代码组织结构清晰
                ·可读性强
                ·利于前期和后期的扩展以及维护
            ‘开闭原则：对扩展进行开发，对修改进行关闭’
            class AbastractCaculator
            {
            public:
                //虚函数
                virtual int getResult()
                {
                    return 0;
                }
                int m_Num1;
                int m_Num2;
            };
            class AddCaculator :public AbastractCaculator
            {
            public:
                virtual int getResult()
                {
                    return m_Num1 + m_Num2;
                }
            };
            class SubstrationCaculator :public AbastractCaculator
            {
            public:
                virtual int getResult()
                {
                    return m_Num1 - m_Num2;
                }
            };
            class MulCaculator :public AbastractCaculator
            {
            public:
                virtual int getResult()
                {
                    return( m_Num1 * m_Num2);
                }
            };
            void test1()
            {
                //创建一个加法计算器
                AbastractCaculator* abc = new AddCaculator;
                abc->m_Num1 = 10;
                abc->m_Num2 = 10;
                cout << abc->getResult() << endl;
                //用完记得销毁
                delete abc;
                abc = new SubstrationCaculator;
                cout << abc->getResult() << endl;
                delete abc;
                abc = new MulCaculator;
                abc->m_Num1 = 100;
                abc->m_Num2 = 100;
                cout << abc->getResult() << endl;
                delete abc;
            }
        2.7.3纯虚函数和抽象类
            在多态中，通常父类中虚函数的实现时毫无意义的，主要都是调用子类重写的内容
            因此可以将虚函数改为纯虚函数
            语法：virtual 返回值类型 函数名（参数列表） = 0；
                virtual void func()=0;
            当类中有了纯虚函数，这个类也称为抽象类
            抽象类特点：  
                ·‘无法’实例化对象->栈上不可以，堆区也不可以创建内存
                ·子类‘必须重写’抽象类中的纯虚函数，不然也是抽象类
        2.7.4多态案例二.制作饮品
            class AbastractDrinking
            {
            public:
                virtual void Boil() = 0;
                virtual void Brew() = 0;
                virtual void PourInCup() = 0;
                virtual void AddInotherthing() = 0;
                void MakeDrink()
                {
                    Boil();
                    Brew();
                    PourInCup();
                    AddInotherthing();
                }
            };
            class MakeCoffee:public AbastractDrinking
            {
            public:
                virtual void Boil()
                {
                    cout << "煮水 农夫山泉" << endl;
                }
                virtual void Brew() 
                {
                    cout << "冲泡咖啡" << endl;
                }
                virtual void PourInCup() 
                {
                    cout << "倒入咖啡" << endl;
                }
                virtual void AddInotherthing()
                {
                    cout << "加入牛奶" << endl;
                }
            };
            //工作函数
            void doWork(AbastractDrinking* abs)
            {
                abs->MakeDrink();
            }
            void test()
            {
                doWork(new  MakeCoffee);
            }
        2.7.5虚析构和纯虚析构
            多态使用时，如果子类中有属性开辟到堆区，那么父类指针在‘释放时’无法调用到子类的析构代码
            解决方法：将父类中的析构函数改为‘虚析构’或者纯虚析构

            虚析构和纯虚析构共性：
                ·可以解决父类指针释放子类对象
                ·都需要有具体的函数实现
            虚析构和纯虚析构区别：
                ·如果是纯虚析构，该类属于抽象类，无法实例化对象
            虚析构语法：
                virtual ~类名(){}
            纯虚析构语法：
                virtual ~类名()=0;
                类名::~类名(){}    （类外必须要写的实现）
            总结：
                1.虚析构或纯虚析构就是用来解决父类指针释放子类对象
                2.如果子类中没有堆区数据，可以不写虚析构或纯虚析构
                3.拥有纯虚析构的类也属于抽象类
        2.7.6多态案例三.电脑组装
            
