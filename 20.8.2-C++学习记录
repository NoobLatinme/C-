1.内存分区模型
    ·代码区：存放函数体的二进制代码，由操作系统进行管理
        存放CPU执行的机器指令
        代码是共享的，共享的目的是对于频繁被执行的程序，只需要在内存中有一份代码即可
        代码是只读的，防止程序意外地修改了它的指令
    ·全局区：存放全局变量和静态变量以及常量
        全局变量和静态变量存放在此
        全局区还包括常量区，字符串常量和其他常量也存放于此
        该区域的数据在程序结束后由操作系统释放
    总结：
        ·C++中在程序运行前分为全局区和代码区
        ·代码区特点是共享和只读
        ·全局区中存放全局变量、静态变量、常量
        ·常量区中存放const修饰的全局常量和字符串常量
    ·栈区：由编译器自动分配释放，存放函数的参数值，局部变量等
        注意事项：不要返回局部变量的地址，栈区开辟的地址由编译器自动释放
    ·堆区：由程序员分配和释放，若程序员不释放，程序结束时由操作系统回收
    总结：
        堆区数据由程序员管理开辟和释放
        在C++中主要利用'NEW'在堆区开辟内存
    内存四区意义：
    不同区域存放数据，赋予不同的生命周期，给我们更大的灵活编程

2.NEW操作符
    在C++中主要利用'NEW'在堆区开辟内存，利用操作符delete手动释放
    堆区数据由程序员管理开辟和释放
    语法： new 数据类型
    利用new创建的数据，会返回该数据对应类型的指针
int*  func()
{
	int* p = new int(10);  //new->在堆区开辟新的内存
	return p;              //利用new关键字，可以将数据开辟到堆区
	//指针本质也是局部变量，放在栈上，指针保存的数据是放在堆区
}
int main()
{
	int* p = func();
	cout << *p << endl;
	cout << *p << endl;
	cout << *p << endl;
	cout << *p << endl;
	delete p;   //删除数组  delete [] arr;   
}
3.引用
    使用场景：
        比指针简单
    int a=10;
    int &ref=a;
    注意事项：
        1.不要函数引用->不要引用局部变量
        2.引用需要初始化
        3.初始化后不能改变指向
    本质：
        指针常量
        编译器会自动得将 int &ref=a -> int *const ref=a;
        所以指针得指向是无法修改的，但指针指向的值可以修改
4.常量引用
    使用场景：用来修饰形参，防止误操作

    int &ref=10;  //×引用必须引一块合法内存空间
    const int &ref=10; //√ 
    编译器将代码自动修改成:
        int temp=10;
        const int &ref=temp;
5.函数提高
    5.1·函数的默认参数
        语法：返回值类型 函数名（数据类型 默认值）{}
        int func(int a,b=10,c=10)
            return a+b+c;
        注意事项：
            1.如果某个位置已经有了默认参数，那么这个位置往后都需要有默认参数
                int func(int a,b=10,c)  //×
            2.如果函数的声明有了默认参数，那么这个函数的实现就不能有默认的参数
            只能函数声明或函数定义一方中有默认参数
                #define<stdio.h>
                int func(int a=10,int b=10)
                    ········
                int func(int a=20,int b=20)   //× 将会出现 ‘二义性’
                    return a+b;
    5.2·函数的占位参数
        语法：返回值类型 函数名（数据类型）{}
        int func(int a,int)
            return a;
            注意事项：
            1.占位参数可以有默认参数
