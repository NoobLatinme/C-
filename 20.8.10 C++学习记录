C++提高编程
    1.模板
        1.1模板概念
            ·主要针对C++泛型编程和STL技术做详细详解，探讨C++更深层次
            ·C++提供两种模板机制：函数模板和类模板
        1.2函数模板
            1.2.1函数模板语法
                语法：
                1.template<typename T>
                2.函数声明或定义
                template<typename T>   //T为通用数据类型
                void mySwap(T &a,T &b)
                {
                    T temp=a;
                    a=b;
                    b=temp;
                }

                void test()
                {
                    int a=10;
                    int b=20;
                    //两种方式使用函数模板
                    //1.自动类型推导
                    mySwap(a,b);
                    cout<<a<<b<<endl;
                    //2.显示自动类型
                    mySwap<int>(a,b);
                    cout<<a<<" "<<b<<endl;
                }
            1.2.2函数模板注意事项
                ·自动类型推导，必须推导出一致的‘数据类型T’才可以
                ·模板必须要确定出‘T的数据类型’，才可以使用
            1.2.3函数模板案例
                template<class T>
                void Swap(T &a,T &b)
                {
                    T temp=a;
                    a=b;
                    b=temp;
                }
                template<class T>
                void sort(T arr[],int len)
                {
                    int temp=0;
                    for(int i=0;i<len;i++)
                    {
                        int max=i;
                        for(int j=i;j<len;j++)
                        {
                            if(arr[max]<arr[j])
                            {
                                max=j;
                            }
                        }
                
                        if(max!=i)
                        {
                            Swap(arr[max],arr[i]);
                        }
                    }
                
                }
                template<class T> 
                void printArr(T arr[],int len)
                {
                    for(int i=0;i<len;i++)
                    {
                        cout<<arr[i]<<" ";
                    }
                }
                void test()
                {
                    char charArr[]={"baaksdjla"};
                    int len=sizeof(charArr)/sizeof(char);
                    sort(charArr,len);
                    printArr(charArr,len);
                
                    int intArr[]={6,3,2,68,86,1};
                    int len1=sizeof(intArr)/sizeof(int);
                    sort(intArr,len1);
                    printArr(intArr,len1);
                }
            1.2.4普通函数与函数模板的区别
                ·普通函数调用时‘可以发生’隐式类型转换
                ·函数模板调用
                    1.自动类型转换×    2.显示指定类型转换√
            1.2.5普通函数与函数模板的调用规则
                1.如果都可以实现，优先调用普通函数
                2.可以通过空模板参数列表来强制调用函数模板
                3.函数模板可以发生函数重载
                4.如果函数模板可以产生更好的匹配，优先调用
                总结：既然提供了函数模板，就不要提供普通函数，容易出现二义性
            1.2.6模板的局限性
                //具体化的模板，可以解决自定义类型的调用
                template<>Person myCompare(Person &p1,Person &p2)   
        1.3类模板
            1.3.1类模板语法
                template<class NameType,class AgeType>
                class Person
                {
                public:
                    Person(NameType name,AgeType age)
                    {
                        this->m_Name=name;
                        this->m_Age=age;
                    }
                    NameType m_Age;
                    AgeType m_Name;
                };
                void test()
                {
                    Person<string,int>p1("张三",25);
                }
            1.3.2类模板和函数模板的区别
                1.类模板没有自动类型推导的使用方式
                2.‘类模板’在模板参数列表中可以有默认参数
            1.3.3类模板中成员函数创建时机
                1.普通类中的成员函数一开始就可以创建
                2.类模板中的成员函数在调用时才创建
            1.3.4类模板对象作函数参数
                1.指定传入类型
                2.参数模板化
                3.整个类模板化
                template<class T1,class T2>
                class person
                {
                    public:
                    person(T1 name,T2 age)
                    {
                        this->m_age=age;
                        this->m_name=name;
                    }
                    void show()
                    {
                        cout<<this->m_name<<" "<<this->m_age<<endl;
                    }
                    T2 m_age;
                    T1 m_name;
                };
                //1.（常用）指定传入类型,类模板的对象作参数传入函数
                void printPerson1(person<string,int>&p)
                {
                    p.show();
                }
                //2.参数模板化
                template<class T1,class T2>
                void printPerson2(person<T1,T2>&p)
                {
                    p.show();
                    cout<<"T1的类型为："<<typeid(T1).name()<<endl;
                    cout<<"T2的类型为："<<typeid(T2).name()<<endl;
                }
                //3.整个类模板化
                template<class T>
                void printPerson3(T &p)
                {
                    p.show();
                    cout<<"T的类型为："<<typeid(T).name()<<endl;
                }
                void test()
                {
                    person<string,int>p1("ss2",100);
                    printPerson3(p1);
                }
            1.3.5类模板与继承         
                template<class T>
                class Base
                {
                    T m;
                };
                //class Son:public Base  ×，必须要指定数据类型，否则编译器无法分配指定内存
                class Son:public Base<int>{};
                //如果想灵活指定父类中T类型 ，子类也需要变类模板
                template<class T1,class T2>
                class Son2:public Base<T2>
                {
                    T1 obj;
                };
                void test1()
                {
                    Son2<int ,char>S2;   //int 指向子类T1  ，char 指向父类T
                }
            1.3.6类模板中成员函数的类外实现
                template<class T1,class T2>
                class Person
                {
                    Person(T1 age,T2 name);
                    void show();
                    T1 m_age;
                    T2 m_name;
                };
                //类模板构造函数类外实现
                template<class T1,class T2>
                Person<T1,T2>::Person(T1 age,T2 name)
                {
                        this->m_name=name;
                        this->m_age=age;
                }
                //类模板成员函数类外实现
                template<class T1,class T2>
                void Person<T1,T2>::show()
                {
                    cout<<"  "<<endl;
                }
            1.3.7类模板分文件编写
                1.直接主函数中直接添加源文件  #include"person.cpp"
                2.（常用）将头文件.h和源文件.cpp写在一起  #include"person.hpp"
            1.3.8类模板与友元
                ·类模板配合友元函数的类内类外实现
                //提前声明
                template<class T1,class T2>
                class person;

                template<class T1,class T2>
                void show2(person<T1,T2>p)
                {
                    cout<<p.m_name<<" "<<p.m_age<<endl;
                }
                //类模板对象作参数对象
                template<class T1,class T2>
                class person
                {
                    //1.全局函数 类内实现
                    friend void show(person<T1,T2>p)
                    {
                        cout<<p.m_name<<" "<<p.m_age<<endl;
                    }
                    //2.全局函数 类外实现
                    //加空模板参数列表
                    friend void show2<>(person<T1,T2>p);

                public:
                    person(T1 name,T2 age)
                    {
                        this->m_age=age;
                        this->m_name=name;
                    }
                private:
                    T2 m_age;
                    T1 m_name;
                };

                void test()
                {
                    person<string,int>p("Tom",20);
                    show(p);
                    show2<>(p);
                }
                总结：没有特殊需求，尽量用类内实现全局函数
            1.3.9类模板案例
                 案例描述：实现一个‘通用’的‘数组类’，要求如下：
                ·可以对内置数据类型以及‘自定义数据类型’的数据进行存储
                ·将数组中的数据存储到‘堆区’
                ·构造函数中可以传入数组的容量
                ·提供对应的拷贝函数以及赋值运算符重载，‘解决浅拷贝’的问题
                ·提供尾插法和尾删法对数组中的数据进行增加和删除
                ·可以通过下标的方式访问数组中的元素（[]的重载）
                ·可以获取数组中当前元素个数和数组的容量

                ·已上传至GITHUB√
