2.2对象的初始化和清理
        2.2.1构造函数和析构函数
            对象的‘初始化和清理’是两个非常重要的安全问题
                一个对象或者变量没有初始状态，对其使用后果是未知的
                同样的使用完一个对象或变量，没有及时清理，也会造成一定安全问题
            C++利用构造函数和析构函数解决上述问题，这两个函数会被编译器自动调用，完成对象初始化和清理工作
            对象初始化和清理工作是编译器强制要我们做的事情，因此如果我们不提供构造和析构，编译会自动的提供
            但提供的构造函数和析构函数是‘空实现’（没有任何代码）
            
                ·构造函数：主要作用在于创建对象时为对象的成员属性赋值，构造函数由编译器自动调用，无须手动调用
                ·析构函数：主要作用于对象销毁前系统自动调用，执行一些清理工作
            
            构造函数语法：类名(){}
            1.构造函数，没有返回值也不写void 
            2.函数名称与类名相同
            3.构造函数可以有参数，因此可以发生重载
            4.程序在调用对象时候自动调用构造，无须手动调用

            析构函数语法：~类名(){}
            1.析构函数，没有返回值也不写void
            2.函数名称与类名相同，在名称前加上符号~
            3.析构函数‘不可以有参数’，因此不可以发生重载
            4.程序在对象销毁前会自动调用析构，无须手动调用
            class Person
            {
            public:
            
                Person()
                {
                    cout << "构造函数的调用" << endl;
                }
            
                ~Person()
                {
                    cout << "析构函数的调用" << endl;
                }
            };
            void test() //存在栈中，调用完后自动释放，构造和析构一次产生
            {
                
                Person p;
            }
            
            int main()
            {
                test();
                Person p; //局部变量，构造函数调用，当程序关闭，析构函数调用
                system("pause");
                return 0;
            }
            CMD中执行结果：
                构造函数的调用
                析构函数的调用
                构造函数的调用
                请按任意键继续. . .
                析构函数的调用
        2.2.2构造函数的分类及调用
            两种分类方式：
                把参数分为：由参构造和无参（默认）构造
            三种调用方式：
                1.括号法
                2.显示法
                3.隐式转换法
            注意事项：
                ·在调用默认构造函数时候，不要加()，会被编译器认为是函数声明将不会创建对象
                ·不要利用拷贝函数构造函数来初始化匿名对象
                class Person
                {
                public:
                    //按照有无参数调用构造函数
                    Person()
                    {
                        cout << "无参构造函数的调用" << endl;
                    }
                    Person(int a)
                    {
                        age = a;
                        cout << "有参构造函数的调用" << endl;
                    }
                    //拷贝构造函数
                    Person(const Person &p)
                    {
                        //将传入的人身上的所有属性，拷贝到本人身上
                        age = p.age;
                    }
                
                    int age;
                };
                //调用
                void test01()
                {
                    //1.括号法调用
                    Person p1;     //默认（无参）参数
                    Person p2(10); //有参
                    Person p3(p2); //拷贝构造函数
                    //Person p1();    将会被认为函数声明，不会创建对象
                
                    //2.显示法调用
                    Person p1;
                    Person p2 = Person(10);//有参
                    Person p3 = Person(p2);//拷贝
                
                    Person(10); //匿名对象 特点：当前行执行结束后，系统会立即回收匿名对象
                    //Person(p3);//编译器会认为Person (p3) === Person p3; 对象声明，会被认为重定义，利用拷贝×
                    
                    //3.隐式转换法
                    Person p4 = 10;//相当于写了Person p4= Person (10)
                    Person p5 = p4;//相当于写了Person p5= Person (p4)
                }
                int main()
                {
                    test01();
                }
        2.2.3拷贝构造函数调用时机
            C++中拷贝构造函数调用时机通常有三种情况
            ·使用一个已经创建完毕的对象来初始化一个新对象
            ·值传递的方式给函数参数传值
            ·以值方式返回局部对象
        2.2.4构造函数调用规则
            默认情况,C++编译器至少给一个类添加3个函数
            1.默认构造函数（无参，函数体为空）
            2.默认析构函数（无参，函数体为空）
            2.默认拷贝构造函数，对属性进行值拷贝
            
            ·如果用户定义有参构造函数，C++：
                1.不提供 2.提供 3.提供
            ·如果用户定义拷贝构造函数，C++：
                1.不提供 2.不提供 3.不提供
