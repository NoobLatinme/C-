    2.STL初始
        2.1STL的诞生
            ·C++的面向对象和泛型编程的思想，目的就是复用性的提升
            ·大多数情况下，数据结构和算法都未能有一套标准，导致被迫提高重复工作
            ·为了建立数据结构和算法的一套标准，诞生了STL
        2.2STL
            ·STL(Standard Template Libary 标准模板库)
            ·STL广义上分为：容器(container) 算法(algorithm) 迭代器(iterator)
            ·‘容器’和‘算法’之间通过‘迭代器’进行无缝连接
            ·STL几乎所有代码都采用模板类或着模板函数
        2.3STL六大组件
            容器 算法 迭代器 仿函数 适配器（配接器） 空间配置器
            1.容器：各种数据结构，用来存放数据
            2.算法：各种常用算法
            3.迭代器：为了扮演容器与算法之间的胶合剂
            4.仿函数：行为类似函数，可作为算法的某种策略
            5.适配器：一种用来修饰容器或者仿函数或迭代器接口的东西
            6.空间配置器：负责空间的配置与管理
        2.4STL中容器、算法、迭代器  
            容器：将运用最广泛的一些数据结构实现出来
                容器可以分为：
                    序列是容器：强调值得排序，容器中得每个元素都有固定的位置
                    关联式容器：二叉树结构，各元素之间没有严格的物理上的顺序关系
            算法：有限的步骤，解决逻辑或数学上的问题(Algorithm)
                算法可以分为：
                    质变算法：指运算过程中会更改区间内元素的内容，例如拷贝、替换、删除
                    非质变算法：指运算过程中不会更改区间内元素的内容，例如查看、计算、遍历
            迭代器：容器和算法的桥梁
                算法需要通过迭代器访问容器里的数据...
                每个容器都有自己专属的迭代器
                迭代器使用非常类似于指针...
                迭代器的种类：
                    输入          对数据的只读访问
                    输出          对数据的只写访问
                    前向          读写，并能向前推进迭代器
                    双向          读写，并能向前和向后
                    随机访问      读写，可以跳跃式访问任何数据

        2.5容器算法迭代器初始
            2.5.1vector存放内置数据类型
                容器：vector
                算法：for_each
                迭代器：vector<int>::iterator
                void myPrint(int val)
                {
                    cout<<val<<endl;
                }
                void test()
                {
                    vector<int>v;

                //像容器中插入数据，尾插
                    v.push_back(10);
                    v.push_back(20);
                    v.push_back(30);

                    //第一中遍历方式

                    //begin()指向容器中第一个元素
                    vector<int>::iterator itBegin=v.begin(); 
                    //end()指向容器中最后一个元素的下一个位置 
                    vector<int>::iterator itEnd=v.end();

                    while(itBegin!=itEnd)
                    {
                        //解引用
                        cout<<*itBegin<<endl;
                        itBegin++;
                    }

                //第二种遍历的方式
                for(vector<int>::iterator it=v.begin();it!=v.end();it++)
                {
                    cout<<*it<<endl;
                }

                //第三种遍历  利用STL提供遍历算法
                for_each(v.begin(),v.end(),myPrint);
                }
            2.5.2vector存放自定义数据类型
                class Person
                {
                public:
                    Person(string name,int age)
                {
                    this->m_name=name;
                    this->m_age=age;
                }
                
                    int m_age;
                    string m_name;
                };
                
                void test()
                {
                    Person p1("aaa",10);
                    Person p2("bbb",20);
                
                    vector<Person> v;
                    v.push_back(p1);
                    v.push_back(p2);
                
                    for(vector<Person>::iterator it=v.begin();it!=v.end();it++)
                    {
                        cout<<it->m_age<<" "<<it->m_name<<endl;
                    }
                }
            2.5.3vector容器嵌套容器
                void test()
                {
                    //大
                    vector<vector<int>>v;
                    //小
                    vector<int>v1;
                    vector<int>v2;
                
                    //向小容器中添加数据
                    for(int i=0;i<4;i++)
                    {
                        v1.push_back(i+1);
                        v2.push_back(i+2);
                    }
                
                    //将小容器插入到大容器中
                    v.push_back(v1);
                    v.push_back(v2);
                
                    for(vector<vector<int>>::iterator it=v.begin();it!=v.end();it++)
                    {
                        for(vector<int>::iterator vit=it->begin();vit!=it->end();vit++)
                            cout<<*vit<<" "<<endl;
                    }
                }
    3.STL常用容器
        3.1string容器
            3.1.1string基本概念
                本质：类
                string 和char* 区别：
                    1.char*是一个指针
                    2.string是一个类，类内部封装了  char* ，管理这个字符串
                    特点：
                        string类内部封装了很多成员方法
                        例如：查找find，拷贝copy，删除delete
                        string管理char* 所分配的内存，不用担心复制越界和取值越界，由类内部负责
            3.1.2string构造函数
                string();
                string(const cha* s);
                string(const string& str);
                string(int n,char c);//输出n个c
            3.1.3string的赋值操作
                功能描述：给string 字符串进行赋值
                1.= 2.assign()
            3.1.4string字符串拼接
                功能描述：实现在字符串末尾拼接字符串
                1.+= 2.append
            3.1.5string查找和替换
                功能描述：1.查找：查找指定字符串是否存在 2.替换：在指定的位置替换字符串
                1.find rfind 2.replace
            3.1.6string字符串比较
                功能描述：字符串之间的比较
                比较方式：字符串比较是按字符的ASCII码逐个进行对比  1.相等= 0 2.大于> 1 3.小于< -1
                1.compare
            3.1.7string字符存取
                功能描述：对指定位置访问元素，可以修改元素  
                1.[](符号重载) 2.at(访问单个字符)
            3.1.8string插入和删除
                功能描述：对字符串进行插入和删除
                1.insert 2.erase    
            3.1.9string子串
                功能描述：从字符串中截取想要的字串
                1.substr
                总结：灵活运用可以在开发中获取有效信息
        3.2vector容器
            3.2.1基本概念
                功能：vector数据结构和数组非常相似，也称为单端数据
                vector和普通数组的区别：
                    数组是静态的，而vector是可以动态扩展的
                动态扩展：
                    ·是寻找更大的内存空间，拷贝原内容后添加新内容
                    ·vector容器的迭代器是支持随机访问的迭代器
            3.2.2vector构造函数
                功能描述：创建vector容器
                函数原型：
                    vertor<T> v;                   //采用模板实现类实现，默认构造函数
                    vertor<v.begin(),v.end()>;     //将v[begin(),end()]区间中的元素拷贝给本省
                    vector(n,elem);                //构造函数将n个elem拷贝给本身
                    vector(const vector &vec);     //拷贝构造函数
            3.2.3vector赋值操作
                功能描述：给vector容器赋值
                1.= 2.assign()
            3.2.4vector容量和大小
                功能描述：获取vector容器大小
                1.empty() 2.capacity() 3.size() 4.resize(int num) 5.resize(int num,elem)
            3.2.5vector插入和删除
                1.push_back() 2.pop_back() 3.insert(v1.begin(),10) 4.erase(v1,begin(),2) 5.clear()
            3.2.6vector数据存取
                1.at(int index) 2.operator[] 3.front()返回第一个元素 4.back()返回容器中最后一个元素
            3.2.7vector互换容器
                功能实现：实现两个容器内元素互换
                1.swap(vec);
                ·巧用swap可以收缩内存空间
                vector<int>(v).swap(v);
                //（x）vector<int>(v)->匿名对象，用后自动删除
                //v和匿名对象x交换，实现收缩内存
            3.2.8vector预留空间
                功能描述：减少vector在‘动态扩展’容量时的扩展次数
                1.reserve(int len)//容器预留len个元素长度，预留位置不初始化，所以不可以访问
                总结：如果数据量较大，可以一开始便使用reserve
